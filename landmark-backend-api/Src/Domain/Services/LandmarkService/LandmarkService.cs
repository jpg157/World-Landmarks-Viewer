using landmark_backend_api.Models;
using landmark_backend_api.Dtos.Request;
using landmark_backend_api.Dtos.Response;
using landmark_backend_api.Validators;
using landmark_backend_api.Services.ImageService;
using landmark_backend_api.DataAccess;

namespace landmark_backend_api.Services.LandmarkService;

public class LandmarkService : ILandmarkService
{
  private readonly ILandmarkDataAccessor _landmarkDataAccessor;
  private readonly IImageService _imageService;

  public LandmarkService(
    ILandmarkDataAccessor landmarkDataAccessor,
    IImageService imageService)
  {
    _landmarkDataAccessor = landmarkDataAccessor;
    _imageService = imageService;
  }

  public async Task<PaginatedItemsDTO<Landmark>> GetAllLandmarks() //TODO: Add PaginationReqParams class into params
  {
    PaginatedItemsDTO<Landmark> paginatedLandmarksDto;

    PaginatedMetadataDTO paginatedMetadataDTO = new PaginatedMetadataDTO
    {
      CurrentPageNum = 1,
      TotalNumPages = 1, // total items (attained from getAll from db)
      TotalNumItemsPerPage = 10
    };
    paginatedLandmarksDto = new PaginatedItemsDTO<Landmark>
    {
      Data = await _landmarkDataAccessor.FindAll(),
      Metadata = paginatedMetadataDTO
    };

    return paginatedLandmarksDto;
  }

  public async Task<Landmark?> GetLandmarkById(int id)
  {
    return await _landmarkDataAccessor.FindById(id);
  }

  public async Task<Landmark> CreateLandmark(LandmarkReqDto landmarkDto)
  {
    Landmark landmark = CreateLandmarkDomainEntityFromDto(landmarkDto);
    Landmark newLandmark = await _landmarkDataAccessor.Create(landmark);
    return newLandmark;
  }

  public async Task<IEnumerable<Landmark>> BulkCreateLandmarks(IEnumerable<LandmarkReqDto> landmarkReqDtos)
  {
    IEnumerable<Landmark> landmarks = landmarkReqDtos.Select(CreateLandmarkDomainEntityFromDto);
    IEnumerable<Landmark> newLandmarks = await _landmarkDataAccessor.CreateMany(landmarks);
    return newLandmarks;
  }

  public async Task<Landmark?> UpdateLandmark(int landmarkId, LandmarkReqDto landmarkDto)
  {
    Landmark landmark = CreateLandmarkDomainEntityFromDto(landmarkDto);
    Landmark? updatedLandmark = await _landmarkDataAccessor.Update(landmarkId, landmark);
    return updatedLandmark;
  }

  public async Task<Landmark?> UploadLandmarkImage(IFormFile imageFile, int landmarkId)
  {
    Landmark? foundLandmark = await _landmarkDataAccessor.FindById(landmarkId);

    if (foundLandmark == null)
    {
      return null;
    }

    string imageSrcUrl = await _imageService.UploadEntityImageAsync(imageFile!, landmarkId, foundLandmark.GetType().Name);
    Landmark? updatedLandmark = await _landmarkDataAccessor.UpdateImageSrcUrl(imageSrcUrl, landmarkId);
    return updatedLandmark;
  }

  public async Task DeleteLandmarkById(int id)
  {
    Landmark? landmark = await _landmarkDataAccessor.FindById(id);

    if (landmark == null)
    {
      throw new KeyNotFoundException("The landmark with id was not found");
    }

    await _landmarkDataAccessor.DeleteById(id);

    if (landmark.ImageApiUrl != null)
    {
      await _imageService.DeleteEntityImageAsync(landmark.ImageApiUrl); 
    }
  }

  private static Landmark CreateLandmarkDomainEntityFromDto(LandmarkReqDto landmarkDto)
  {
    // dto should have been validated in the handler, so all properties should not be null
    // non-null validation check at runtime
    ConfirmValidDto<LandmarkReqDto>.NoNullProperties(landmarkDto);
    ConfirmValidDto<LandmarkLocationDataReqDto>.NoNullProperties(landmarkDto.LandmarkLocation);

    // todo: add domain logic validation
    // - check that landmark.Name doesn't already exist

    // create new landmark entry using dto values
    Landmark landmark = new Landmark
    {
      Name = landmarkDto.Name!,
      Description = landmarkDto.Description!,
      LandmarkLocation = new LandmarkLocationData
      {
        XCoord = (double)landmarkDto.LandmarkLocation!.XCoord!,
        YCoord = (double)landmarkDto.LandmarkLocation.YCoord!,
      }
    };

    // Add foreign key relation (autogenerated id will be assigned to LandmarkLocation.LandmarkId after db insertion)
    landmark.LandmarkLocation.Landmark = landmark;

    return landmark;
  }
}
